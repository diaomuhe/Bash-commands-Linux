1. Ampersand Operator (&)

The function of ‘&‘ is to make the command run in background. Just type the command followed with a white space and ‘&‘. You can execute more than one command in the background, in a single go.

Run one command in the background:
$ ping -c5 www.tecmint.com &

Run two command in background, simultaneously:
$ apt-get update & apt-get upgrade &


> perl script.pl > output.log &

# The & makes the command run in the background. If a command is terminated by the control operator &, the shell executes the command in the background in a subshell. The shell does not wait for the command to finish, and the return status is 0. If a command is terminated by the control operator &, the shell executes the command in the background in a subshell. The shell does not wait for the command to finish, and the return status is 0.

> nohup sh my_script.sh &
# By default anyway. If your command is long-running or runs indefinitely (ie: microservice) you need to pr-pend it with nohup so it remains running after you disconnect from the session.

2. AND Operator (&&)

The AND Operator (&&) would execute the second command only, if the execution of first command SUCCEEDS, i.e., the exit status of the first command is 0. This command is very useful in checking the execution status of last command.

For example, I want to visit website tecmint.com using links command, in terminal but before that I need to check if the host is live or not.

$ ping -c3 www.tecmint.com && links www.tecmint.com

The difference between & and &&: & executes the first command in the background; && executes the first command and conditionally proceeds to the second if it exits with success.

https://stackoverflow.com/questions/13338870/what-does-at-the-end-of-a-linux-command-mean
